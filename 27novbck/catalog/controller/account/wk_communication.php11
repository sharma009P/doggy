<?php

class ControllerAccountWkCommunication extends Controller
{
	private $error = array();
	public function index() {
		if (!$this->customer->isLogged()) {
			$this->session->data['redirect'] = $this->url->link('account/wk_communication', '', true);

			$this->response->redirect($this->url->link('account/login', '', true));
		}

	$this->load->language('account/account');
	$data['breadcrumbs'][] = array(
			'text' => $this->language->get('text_home'),
			'href' => $this->url->link('common/home')
		);

		$data['breadcrumbs'][] = array(
			'text' => $this->language->get('text_account'),
			'href' => $this->url->link('account/account', '', true)
		);
	$id=$this->customer->getId();
	$this->load->language('account/wk_communication');
	$extension = $this->config->get('module_wk_communication_type');
	$extensions = explode(',', $extension);
	$data['extension'] = $extensions;
	$data['max'] =$this->config->get('module_wk_communication_max');
	$data['size'] =$this->config->get('module_wk_communication_size');
	$data['type'] =explode(",", $this->config->get('module_wk_communication_type'));

	$data['max'] = $this->config->get('module_wk_communication_max');
	$this->load->model('extension/module/wk_contact');
	//Getting sent messages
	$sent = $this->model_extension_module_wk_contact->getQuery($this->customer->getId(),2);
	$data['sent'] = $sent;
	$this->document->setTitle($this->language->get('heading_title'));
	// $this->document->addStyle('catalog/view/theme/default/stylesheet/MP/MPSellerBuyer.css');
	$this->document->addScript("catalog/view/javascript/wk_communication/angular.min.js");
	$this->document->addScript('https://cdnjs.cloudflare.com/ajax/libs/ngInfiniteScroll/1.2.2/ng-infinite-scroll.js');
	$this->document->addScript('https://ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular-sanitize.js');

	// $this->document->addScript("https://ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular-route.js");
	$this->document->addScript('catalog/view/javascript/wk_communication/wk_communication.js');

	$data['total'] = $this->model_extension_module_wk_contact->getTotal($this->customer->getId());
	if (isset($this->session->data['error_warning'])) {
			$data['error_warning'] = $this->session->data['error_warning'];
			unset($this->session->data['error_warning']);
			} else {
			$data['error_warning'] = '';
			}
	$data['action'] = $this->url->link('account/wk_communication/reply','',true);
	$data['column_left'] = $this->load->controller('common/column_left');
	$data['column_right'] = $this->load->controller('common/column_right');
	$data['content_top'] = $this->load->controller('common/content_top');
	$data['content_bottom'] = $this->load->controller('common/content_bottom');
	$data['footer'] = $this->load->controller('common/footer');
	$data['header'] = $this->load->controller('common/header');
	$this->response->setOutput($this->load->view('account/wk_communication', $data));
	}

	public function messages(){
	//Getting the Inbox messages
	$p_id= isset($this->request->get['p_id']) ? $this->request->get['p_id'] : 1;
	$this->load->model('extension/module/wk_contact');
	$results = $this->model_extension_module_wk_contact->getQuery($this->customer->getId(),$p_id);
	$results = array_reverse($results);
	$data['messages'] = $results;
	foreach ($results as $result) {
		$data['threadcount'][] = $this->model_extension_module_wk_contact->countThreads($result['message_id']);
	}
	$data['total'] = $this->model_extension_module_wk_contact->getTotal($this->customer->getId());
	if(isset($this->request->get['p_id'])) {
		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($data));
	} else {
		return $data;
	}
	}
	public function getQueryinfo() {
			$json = array();
			if($this->request->server['REQUEST_METHOD'] == 'POST'){
				$this->load->model('extension/module/wk_contact');
				$message_id = $this->request->post['message_id'];
				$json = $this->model_extension_module_wk_contact->getQueryinfo($message_id);
			}
		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($json));
	}
	public function info() {
		$message_id = $this->request->get['message_id'];
		$this->load->model('extension/module/wk_contact');
		$query_info = $this->model_extension_module_wk_contact->getQueryinfo($message_id);
		$attachment = $this->model_extension_module_wk_contact->getAttachment($message_id);
		$data['query_info'] = $query_info;
		if(!empty($attachment)) {
		$data['attachment'] = $attachment;
		}
		$threads = $this->model_extension_module_wk_contact->getThreadMessages($message_id);
		if(!empty($threads))
		foreach ($threads as $thread) {
			$data['threads']['query_info'][] = $this->model_extension_module_wk_contact->getQueryinfo($thread['message_id']);
			$data['threads']['attachment'][] = $this->model_extension_module_wk_contact->getAttachment($thread['message_id']);
		}

		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($data));
	}
	public function download() {

		$this->load->model('extension/module/wk_contact');
		if (isset($this->request->get['attachment_id'])) {
			$attachment_id = $this->request->get['attachment_id'];
		} else {
			$attachment_id = 0;
		}

		$download_info = $this->model_extension_module_wk_contact->getDownload($attachment_id);

		if ($download_info) {
			$file = DIR_DOWNLOAD .'attachment/'. $download_info['filename'];
			$mask = basename($download_info['maskname']);

			if (!headers_sent()) {
				if (file_exists($file)) {
					header('Content-Type: application/octet-stream');
					header('Content-Disposition: attachment; filename="' . ($mask ? $mask : basename($file)) . '"');
					header('Expires: 0');
					header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
					header('Pragma: public');
					header('Content-Length: ' . filesize($file));

					if (ob_get_level()) {
						ob_end_clean();
					}

					readfile($file, 'rb');

					exit();
				} else {
					exit('Error: Could not find file ' . $file . '!');
				}
			} else {
				exit('Error: Headers already sent out!');
			}
		} else {
			$this->response->redirect($this->url->link('account/wk_communication', '', true));
		}
	}
	public function reply(){
		$keywords =array();
		$secure=0;
		if ($this->request->server['REQUEST_METHOD'] == 'POST' && $this->validate()) {
			require_once DIR_SYSTEM."library/class.phpmailer.php";
			require_once DIR_SYSTEM."library/class.pop3.php";
			require_once DIR_SYSTEM."library/class.smtp.php";
			$mail = new PHPMailer(true);

			try {
					$mail->IsSMTP();
					$mail->SMTPAuth = true;
					//$mail->SMTPDebug=1;
					$mail->Host = $this->config->get('config_mail_smtp_hostname');
					$mail->Username = $this->config->get("config_mail_smtp_username");
					$mail->Password =html_entity_decode($this->config->get('config_mail_smtp_password'), ENT_QUOTES, 'UTF-8');
					$mail->Port =$this->config->get('config_mail_smtp_port');
					$mail->SMTPSecure = 'tls';
					$mail->AllowEmpty = false;
					$mail->setFrom($this->customer->getEmail());
					$mail->FromName = $this->customer->getFirstName().' '.$this->customer->getLastName();
					$mail->addAddress($this->request->post['to']);
					$mail->IsHTML(true);
					$mail->Subject = $this->request->post['subject'];
					$mail->Body    = $this->request->post['message'];
					if($this->config->get('module_wk_communication_bcc'))
					$mail->AddBCC($this->config->get('module_wk_communication_bcc'));
					$mail->WordWrap = 50;
					if($this->config->get('config_email'))
					$mail->addCC($this->config->get('config_email'),'Admin');
				  $mail->msgHTML(html_entity_decode(trim($this->request->post['message']), ENT_QUOTES, 'UTF-8'));
					$attachment = array();
					if(isset($this->request->files) && $this->request->files['file']) {
						foreach ($this->request->files['file']['name'] as $key => $value) {
							if($this->request->files['file']['tmp_name'][$key] && $this->request->files['file']['name'][$key] ){
							$mail->AddAttachment($this->request->files['file']['tmp_name'][$key],$this->request->files['file']['name'][$key]);
							}
						}
					}
					$mail->Send();
					$this->load->language('account/wk_communication');
					$json['success'] =$this->language->get('send_success');
			} catch (phpmailerException $e) {
						$json['error'] = $e->errorMessage(); //error messages from phpmailer !
			} catch (Exception $e) {
					  $json['error']=$e->getMessage(); //error messages from anything else!
			}

			if(isset($json['error']) && $json['error']) {
			   $this->load->language('account/wk_communication');
				$json['error']=$this->language->get('error_message');
			} else {
				$demo = is_dir(DIR_DOWNLOAD .'attachment') ?  '' : mkdir(DIR_DOWNLOAD .'attachment');
				if(isset($this->request->files) && $this->request->files['file']) {
					foreach ($this->request->files['file']['name'] as $key => $value) {
						if($this->request->files['file']['tmp_name'][$key] && $this->request->files['file']['name'][$key] ){
							$file = $this->request->files['file']['name'][$key]. '.' . token(32);
							move_uploaded_file($this->request->files['file']['tmp_name'][$key], DIR_DOWNLOAD .'attachment/'. $file);
							$uploaded['filename'][] = $file;
							$uploaded['mask'][] = $this->request->files['file']['name'][$key];
						}
					}
				}
				$message = html_entity_decode(trim($this->request->post['message']), ENT_QUOTES, 'UTF-8');
				$keywords = explode(',',$this->config->get('module_wk_communication_keywords'));
				$searchin=' ';
				if($this->config->get('module_wk_communication_search')) {
					if(in_array('message', $this->config->get('module_wk_communication_search'))){
					$searchin .= $message;
					}
					if(in_array('subject', $this->config->get('module_wk_communication_search'))){
						$searchin .= $this->request->post['subject'];
					}
				}
				if(!empty($keywords)) {
					foreach ($keywords as $key) {
						if(!empty($key)){
						$key = trim($key);
						if(strpos($searchin, $key)!=false ){
							$secure=1;
							}
					}
					}
				}
				if(isset($uploaded)) {
					$message_id = $this->communication->updateQuery($this->request->post['subject'],$message,$this->request->post['to'],$this->customer->getEmail(),$secure,$uploaded);
				}
				else {
					$message_id = $this->communication->updateQuery($this->request->post['subject'],$message,$this->request->post['to'],$this->customer->getEmail(),$secure);
				}
				$this->communication->updatePlaceholderDetails($this->request->post['to'],$this->customer->getEmail(),$message_id);
				$this->communication->updateReply($message_id,$this->request->post['parent_message']);
				$this->load->language('account/wk_communication');
				$json['success'] =$this->language->get('send_success');
				//$this->response->redirect($this->url->link('account/wk_communication', 'user_token=' . $this->session->data['user_token'], true));
			}
			$this->response->addHeader('Content-Type: application/json');
			$this->response->setOutput(json_encode($json));
		} else {
			$this->response->addHeader('Content-Type: application/json');
			$this->response->setOutput(json_encode($this->error));
		}
	}


	public function validate() {
			$this->load->language('account/wk_communication');
			if(!isset($this->request->post['to']) || !$this->request->post['to']) {
				$this->error['error'] = $this->language->get('error_something_wrong');
			}
			if(!isset($this->request->post['subject']) || !$this->request->post['subject']) {
				$this->error['error'] = $this->language->get('error_subject_empty');
			}
			if(!isset($this->request->post['message']) || !$this->request->post['message']) {
				$this->error['error'] = $this->language->get('error_message_empty');
			}

			return !$this->error;
		}

	public function delete() {
		$this->load->model('extension/module/wk_contact');
		$message_id = $this->request->get['message_id'];
		$customer_id = $this->customer->getId();
		foreach ($message_id as $key => $value) {
		 $this->model_extension_module_wk_contact->deleteQuery($message_id[$key],$customer_id);
		}
		$this->load->language('account/wk_communication');
		$json['success'] = $this->language->get('delete_success');
		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($json));

	}

	public function getMessageinfodata(){
		$this->load->language('account/wk_communication');
		$lang=array(
			'text_expand',
			'text_from',
			'text_date',
			'text_subject',
			'text_me'
			);
		$data['from_me'] = $this->customer->getEmail();
		foreach ($lang as $value) {
			$data[$value] = $this->language->get($value);
		}
		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($data));
	}
	public function upload() {

		if ($this->request->files['file']['name']) {
            if (!$this->request->files['file']['error']) {
                $name = md5(rand(100, 200));
                $ext = explode('.', $this->request->files['file']['name']);
                $filename = $name . '.' . $ext[1];
                if(is_dir(DIR_IMAGE .'attachment/')){
	                $destination =DIR_IMAGE .'attachment/' . $filename;
	                $location = $this->request->files["file"]["tmp_name"];
	                move_uploaded_file($location, $destination);
	                echo HTTP_SERVER .'image/attachment/' . $filename;
	            }else{
	            	mkdir(DIR_IMAGE .'attachment/');
	                $destination = DIR_IMAGE .'attachment/' . $filename;
	                $location = $this->request->files["file"]["tmp_name"];
	                move_uploaded_file($location, $destination);
	                echo HTTP_SERVER. 'image/attachment/' . $filename;
	            }
            }
            else
            {
              echo  $message = 'Ooops!  Your upload triggered the following error:  '.$this->request->files['file']['error'];
            }
        }
	}

}
?>
